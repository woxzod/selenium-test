{
  "stats": {
    "suites": 3,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2024-09-07T07:36:08.407Z",
    "end": "2024-09-07T07:36:17.686Z",
    "duration": 9279,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "35ff9ca7-34e0-423e-92af-ee01eb0eb249",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8c3e8086-7cd9-484e-afe6-a6bbe11898f7",
          "title": "add another todo tests ",
          "fullFile": "/home/blizzard/Desktop/selenium/test/secondTest.js",
          "file": "/test/secondTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "succsess adds a todo application",
              "fullTitle": "add another todo tests  succsess adds a todo application",
              "timedOut": null,
              "duration": 1449,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// launch the browser \n      let driver = await new Builder().forBrowser(\"chrome\").build()\n        // Additional test steps\n      \n    \n      // navigate our application \n      await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n      // add a to do \n      await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n      let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n         return value\n      });\n      //node assertion \n      assert.strictEqual(todoText, \"Learn Selenium\"); \n      //Chai should assertion \n      // close the browser \n      await driver.quit();",
              "err": {},
              "uuid": "b99dbda3-9490-4153-9398-0a026be4a7c6",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b99dbda3-9490-4153-9398-0a026be4a7c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1449,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5e0a0b2a-a476-4b20-8d6b-d496a96e7636",
          "title": "add todo tests ",
          "fullFile": "/home/blizzard/Desktop/selenium/test/firstTest.js",
          "file": "/test/firstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "succsess adds a todo application",
              "fullTitle": "add todo tests  succsess adds a todo application",
              "timedOut": null,
              "duration": 1446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// launch the browser \n      let driver = await new Builder().forBrowser(\"chrome\").build()\n         // Additional test steps\n     \n      // navigate our application \n      await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n      // add a to do \n      await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n      let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n         return value\n      });\n      //node assertion \n      assert.strictEqual(todoText, \"Learn Selenium\"); \n      //Chai should assertion \n      // close the browser \n      await driver.quit();",
              "err": {},
              "uuid": "cf76f384-2782-4c5a-952a-c77ceff50f68",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "succsess adds a todo application",
              "fullTitle": "add todo tests  succsess adds a todo application",
              "timedOut": null,
              "duration": 1213,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// launch the browser \n      let driver = await new Builder().forBrowser(\"chrome\").build()\n         // Additional test steps\n     \n      // navigate our application \n      await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n      // add a to do \n      await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n      let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n         return value\n      });\n      //node assertion \n      assert.strictEqual(todoText, \"Learn JavaScript\"); \n      //Chai should assertion \n      // close the browser \n      await driver.quit();",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n+ actual - expected\n\n+ 'Learn Selenium'\n- 'Learn JavaScript'\n         ^",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n+ actual - expected\n\n+ 'Learn Selenium'\n- 'Learn JavaScript'\n         ^\n    at Context.<anonymous> (test/firstTest.js:96:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Learn Selenium\n+ Learn JavaScript\n"
              },
              "uuid": "bd5c95ba-6471-4b16-bf59-ed946adf78ba",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf76f384-2782-4c5a-952a-c77ceff50f68"
          ],
          "failures": [
            "bd5c95ba-6471-4b16-bf59-ed946adf78ba"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2659,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "ccacf52b-ce0e-4290-b88a-cd930de4b4d8",
          "title": "Optochka Test ",
          "fullFile": "/home/blizzard/Desktop/selenium/test/thirdTest.js",
          "file": "/test/thirdTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Succsessfully login to Apple ",
              "fullTitle": "Optochka Test  Succsessfully login to Apple ",
              "timedOut": null,
              "duration": 8997,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000);\n       // launch the browser \n       let driver = await new Builder().forBrowser(\"chrome\").build()\n // Additional test steps\n       \n     \n \n       // navigate our application \n     \nawait driver.get(process.env.PROD_URL)\n\n// Debug: Print the current URL\nlet currentUrl = await driver.getCurrentUrl();\nconsole.log('Current URL:', currentUrl);\n\n\n       // Debug: Print the page source to verify the content\n    //    let pageSource = await driver.getPageSource();\n    //    console.log(pageSource);\n\n       const timeout = 50000;\n\n       // Click login button \n\n       const firstLoginButton = await driver.wait(\nuntil.elementLocated(By.css('.MuiButtonBase-root.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary'), 10000),\ntimeout\n    );\n\n\nawait firstLoginButton.click();\n    \n// Send brand phone number for login\nconst phoneNumberInput = await driver.wait(\n    until.elementLocated(By.name('phoneNumber')),\n    timeout\n);\nawait phoneNumberInput.sendKeys('937505502');\n\n// Send brand password \nconst passwordInput = await driver.wait(\n    until.elementLocated(By.name('password')),\n    timeout\n);\nawait passwordInput.sendKeys('1234567890');\n\n\n// Wait for and click the login button\nconst loginButton = await driver.wait(\n    until.elementLocated(By.css('.MuiButtonBase-root.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary')),\n    timeout\n);\nawait loginButton.click();\n\n// Additional steps with explicit waits\nconst nextButton = await driver.wait(\n    until.elementLocated(By.className('css-1xw0e9i')),\n    timeout\n);\nawait nextButton.click();\n\n\n\n       // Click orders page button \n \n    //    await driver.findElement(By.className(\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeStandart MuiButton-containedSizeStandart MuiButton-disableElevation MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeStandart MuiButton-containedSizeStandart MuiButton-disableElevation css-2b0to7\")).sendKeys, Key.RETURN;\n \n \n    //    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n    //       return value\n    // });\n \n \n       //node assertion \n\n    //    assert.strictEqual(todoText, \"Learn Selenium\"); \n \n       \n\n//Chai should assertion \n \n\n// close the browser \n \nawait driver.quit();",
              "err": {},
              "uuid": "e13b8fdd-0cee-458d-967c-bf5fa21979fa",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e13b8fdd-0cee-458d-967c-bf5fa21979fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8997,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}